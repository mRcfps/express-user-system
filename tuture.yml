name: My Awesome Tutorial
id: 367d98ae71986bc82e1d5e6a185242b0
steps:
  - name: 初始化项目
    commit: 73879db
    diff:
      - file: .gitignore
      - file: package-lock.json
      - file: package.json
        display: true
        explain:
          pre: >-
            然后运行 `npm init`，回答完一系列问题即可生成 package.json 文件（如果你懒得回答问题的话可以加上 `-y`
            选项）。然后安装 express 和
            morgan（日志中间件，如果对[中间件](http://www.expressjs.com.cn/guide/using-middleware.html)概念不太了解的话也不用担心，后面会详细讲解）。


            ```bash

            $ npm install express morgan

            ```


            你也可以直接复制下面 package.json 的内容，然后执行 `npm install`。
          post: 这里我们将 `private` 字段设置为 `true`，是为了避免意外发布此项目。
    explain:
      pre: |-
        我们创建一个目录用于开发此项目：

        ```bash
        $ mkdir user-system && cd user-system
        ```
  - name: 编写最简单的服务器
    commit: dcc0730
    diff:
      - file: .gitignore
      - file: package.json
        display: true
        explain:
          pre: 接下来在 package.json 中添加 npm `start` 脚本：
      - file: app.js
        display: true
        explain:
          pre: 创建 app.js 如下：
          post: >-
            如果你已经比较熟悉 express 的基本使用，那么可以跳过这一段继续往下看。


            理解 express 框架的关键在于理解**中间件**这个概念，我们先来看 express 官方文档的解释：


            > 中间件（Middleware） 是一个函数，它可以访问请求对象（request object (req)）,
            响应对象（response object (res)）, 和 web 应用中处于请求-响应循环流程中的中间件，一般被命名为 next
            的变量。


            也就是说，只要符合以下函数签名的就算是一个中间件：


            ```javascript

            function middleware(req, res, next)

            ```


            首先我们在第 4 行初始化了一个 express app，然后在第 6 行注册了一个中间件 `morgan()`，在第 8
            行注册了一个路由中间件。express 将会按照从上到下的顺序依次执行中间件。


            最后在第 12 行，我们让 `app` 监听 3000 端口。
    explain:
      pre: 这里我们用 express 编写一个最简单的 web 服务器。
      post: >-
        运行 `npm start`，在浏览器中访问
        [localhost:3000](http://localhost:3000)，可以看到我们的服务器返回了“主页”两字，并且由于 morgan
        中间件的作用，我们可以看到访问日志记录：


        ```

        GET / 200 2.791 ms - 6

        ```
  - name: 实现用户模型
    commit: d2ab91c
    diff:
      - file: package.json
        display: true
        explain:
          pre: >-
            我们首先要安装两个包，mongoose 和 argon2：


            ```bash

            $ npm install mongoose argon2

            ```


            **mongoose**


            MongoDB 官方推出了数据库驱动库 [mongodb](https://www.npmjs.com/package/mongodb)
            ，但这里我们将使用 [mongoose](https://www.npmjs.com/package/mongoose)
            来操纵数据库，因为 mongoose 作为 ODM（Object Document
            Mapping，对象文档映射），在操纵文档型数据库时具有更友好的 API，也就意味着更高的开发效率。


            **argon2**


            在数据库中存储用户密码时必须要先**加密**（明文存储密码发生的悲剧历历在目），通常比较流行的加密算法是 MD5 或是
            Bcrypt。但这里我们要使用的是密码加密大赛的冠军 —— [argon2](https://www.argon2.com/)。
      - file: models/User.js
        display: true
        explain:
          pre: 然后我们创建 models/User.js 文件。通常把所有 model 模块放到一个 models 目录里面是一个很好的习惯。
          post: >-
            需要关注两个地方：


            - 第 9 行，我们在 `userSchema` 的定义中，将 `schemaOptions` 的 `timestamps` 字段设置为
            `true`，这样 Mongo 就会自动为我们的模型添加 `updatedAt`（上次更新时间）和 `createdAt`
            （创建时间）两个字段

            - 第 12 行，我们为模型增加了 pre-save 钩子，这样在每次保存一个 User 模型之前，明文密码就会被加密后存储。


            > 注意！在写 mongoose 钩子函数时**不能使用箭头函数**！因为钩子函数依赖 `this` 上下文环境.
      - file: package-lock.json
      - file: tuture.yml
    explain:
      pre: >-
        接下来我们就要连接数据库了，我们将使用 Node 社区最受欢迎的
        [MongoDB](https://www.mongodb.com/)。凭借其灵活性、高可用性和高扩展性（吹 Mongo
        的文章太多了，自己去搜搜看吧），MongoDB 几乎成为了各应用场景的首选。


        如果你没有安装
        MongoDB，可以访问[这里](https://docs.mongodb.com/manual/administration/install-community/)了解一下如何安装。安装完成后，运行下面的命令打开
        Mongo 数据库：


        ```bash

        $ mongod

        ```


        如果没有出现任何错误，就说明已经安装成功了！
      post: >-
        我们在 Node 交互式执行环境（REPL）中测试一下我们刚刚写的模型：


        ```javascript

        $ node

        > const mongoose = require('mongoose');

        undefined

        > // 连接数据库

        > mongoose.connect('mongodb://localhost:27017/test');

        Promise {
          <pending>,
          domain:
           Domain {
             domain: null,
             _events: { error: [Function: debugDomainError] },
             _eventsCount: 1,
             _maxListeners: undefined,
             members: [] } }
        > const User = require('./models/User')

        undefined

        > // 创建一个用户模型

        > const testUser = new User({ username: 'test', password: 'test' });

        undefined

        > // 保存用户模型

        > testUser.save().then(user => console.log(user));

        Promise {
          <pending>,
          domain:
           Domain {
             domain: null,
             _events: { error: [Function: debugDomainError] },
             _eventsCount: 1,
             _maxListeners: undefined,
             members: [] } }
        > { _id: 5b8e4baa6e617d2d82d3e54b,
          username: 'test',
          password: '$argon2i$v=19$m=4096,t=3,p=1$gMkRF7LR6KGpVv3ys95urw$KUK6Lsnt8xvK6D3C+l//VrHz89Zz91wqt+VotIpG3ec',
          createdAt: 2018-09-04T09:09:03.454Z,
          updatedAt: 2018-09-04T09:09:03.454Z,
          __v: 0 }
        ```


        最后的输出结果中，我们可以清晰地看到用户模型是以怎样的形式存储在数据库中——`_id` 是 MongoDB 为 `testUser`
        模型生成的唯一标识符，`password` 存储了加密后的密码，以及自动生成的 `createdAt` 和 `updatedAt` 字段。


        干得不错！接下来让我们把服务器中接入数据库吧！
